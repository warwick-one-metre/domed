#!/usr/bin/env python3.6
#
# This file is part of domed.
#
# domed is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# domed is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with domed.  If not, see <http://www.gnu.org/licenses/>.

"""Commandline client for controlling domed"""

import datetime
import os
import sys
import Pyro4
from warwick.observatory.common import daemons
from warwick.observatory.dome import (
    CommandStatus,
    DomeShutterStatus,
    DomeHeartbeatStatus)

# Set to the appropriate dome from the Makefile
DOME = 'onemetre'

SCRIPT_NAME = os.path.basename(sys.argv[0])
sys.excepthook = Pyro4.util.excepthook

FMT_GREEN = u'\033[92m'
FMT_RED = u'\033[91m'
FMT_CYAN = u'\033[96m'
FMT_YELLOW = u'\033[93m'
FMT_BOLD = u'\033[1m'
FMT_CLEAR = u'\033[0m'

DAEMONS = {
    'onemetre': daemons.onemetre_dome,
    'rasa': daemons.rasa_dome,
    'nites': daemons.nites_dome,
}

SIDE_A = {
    'onemetre': 'east',
    'rasa': 'south',
    'nites': 'south',
}

SIDE_B = {
    'onemetre': 'west',
    'rasa': 'north',
    'nites': 'north',
}

def run_command(command):
    """Prints the message associated with a status code and returns the code"""
    try:
        ret = command()
    except KeyboardInterrupt:
        # ctrl-c terminates the running command
        ret = stop()

        # Report successful stop
        if ret == 0:
            ret = -100
    except Pyro4.errors.CommunicationError:
        ret = -101

    # Print message associated with error codes, except for -1 (error handled locally)
    if ret != -1 and ret != 0:
        print(CommandStatus.message(ret))
    sys.exit(ret)

def print_status():
    """Prints the dome status in human-readable form"""
    with DAEMONS[DOME].connect() as dome:
        status = dome.status()

    date = datetime.datetime.strptime(status['date'], '%Y-%m-%dT%H:%M:%SZ')
    heartbeat_date = datetime.datetime.strptime(status['heartbeat_date'], '%Y-%m-%dT%H:%M:%SZ')
    eng_mode = FMT_RED + 'ENABLED' if status['engineering_mode'] else FMT_GREEN + 'DISABLED'
    siren = FMT_GREEN + 'ENABLED' if status['heartbeat_siren'] else FMT_RED + 'DISABLED'

    sa = SIDE_A[DOME].title()
    sb = SIDE_B[DOME].title()
    print('Dome status at: {0}'.format(FMT_BOLD + str(date) + FMT_CLEAR))
    print('  {} shutter: {}'.format(sa, DomeShutterStatus.label(status['east_shutter'])))
    print('  {} shutter: {}'.format(sb, DomeShutterStatus.label(status['west_shutter'])))
    print('     Eng. mode: {}'.format(FMT_BOLD + eng_mode + FMT_CLEAR))
    print('Heartbeat status at: {0}'.format(FMT_BOLD + str(heartbeat_date) + FMT_CLEAR))
    print('       Monitor: ' + DomeHeartbeatStatus.label(status['heartbeat_status']))
    print('         Siren: ' + FMT_BOLD + siren + FMT_CLEAR)

    if status['heartbeat_status'] == 1:
        print('Time remaining: {}'.format(FMT_BOLD + str(status['heartbeat_remaining']) \
              + FMT_CLEAR))
    return 0

def stop():
    """Stops any active dome movement"""
    with daemons.rasa_dome.connect() as dome:
        return dome.stop()

def open_dome(args):
    """Opens the dome shutters"""
    if args:
        steps = int(args[1]) if len(args) > 1 else 0
        with DAEMONS[DOME].connect(timeout=0) as dome:
            if args[0] == SIDE_A[DOME]:
                return dome.open_shutters(east=True, steps=steps)
            if args[0] == SIDE_B[DOME]:
                return dome.open_shutters(west=True, steps=steps)
            if args[0] == 'both':
                return dome.open_shutters(east=True, west=True, steps=steps)

    print('usage: {} open ({}|{}|both) [<steps>]'.format(SCRIPT_NAME, SIDE_A[DOME], SIDE_B[DOME]))
    return -1

def close_dome(args):
    """Closes the dome shutters"""
    if args:
        steps = int(args[1]) if len(args) > 1 else 0
        with DAEMONS[DOME].connect(timeout=0) as dome:
            if args[0] == SIDE_A[DOME]:
                return dome.close_shutters(east=True, steps=steps)
            if args[0] == SIDE_B[DOME]:
                return dome.close_shutters(west=True, steps=steps)
            if args[0] == 'both':
                return dome.close_shutters(east=True, west=True, steps=steps)

    print('usage: {} close ({}|{}|both) [<steps>]'.format(SCRIPT_NAME, SIDE_A[DOME], SIDE_B[DOME]))
    return -1

def heartbeat(args):
    """Configure the dome close heartbeat"""
    if args:
        with DAEMONS[DOME].connect() as dome:
            if args[0] == 'disable':
                return dome.set_heartbeat_timer(0)

            if args[0] == 'enable':
                if len(args) > 1:
                    timeout = int(args[1])
                    if timeout > 0:
                        return dome.set_heartbeat_timer(timeout)
            print('usage: {} heartbeat enable <timeout in seconds>'.format(SCRIPT_NAME))
            return -1
    print('usage: {} heartbeat (disable|enable)'.format(SCRIPT_NAME))
    return -1

def engineering_mode(args):
    """Enable or disable engineering mode to disable dome movement"""
    if args:
        with DAEMONS[DOME].connect() as dome:
            if args[0] == 'disable':
                return dome.set_engineering_mode(False)

            if args[0] == 'enable':
                return dome.set_engineering_mode(True)

    print('usage: {} engineering (disable|enable)'.format(SCRIPT_NAME))
    return -1

def siren(args):
    """Enable or disable heartbeat siren"""
    if args:
        with DAEMONS[DOME].connect() as dome:
            if args[0] == 'disable':
                return dome.set_heartbeat_siren(False)

            if args[0] == 'enable':
                return dome.set_heartbeat_siren(True)

    print('usage: {} siren (disable|enable)'.format(SCRIPT_NAME))
    return -1

def print_usage(name):
    """Prints the utility help"""
    print('Usage: {} <command>'.format(name))
    print()
    print('   status        print a human-readable summary of the dome status')
    print('   open          open one or both shutters')
    print('   close         close one or both shutters')
    print('   stop          stop manual open/close command (excludes heartbeat)')
    print('   heartbeat     configure the dome auto-close timeout')
    print('   siren         configure the dome siren')
    print('   engineering   enable or disable engineering mode')
    print()

    return 1

if __name__ == '__main__':
    if len(sys.argv) == 1:
        sys.exit(print_usage(SCRIPT_NAME))

    if sys.argv[1] == 'status':
        run_command(print_status)
    elif sys.argv[1] == 'open':
        run_command(lambda: open_dome(sys.argv[2:]))
    elif sys.argv[1] == 'close':
        run_command(lambda: close_dome(sys.argv[2:]))
    elif sys.argv[1] == 'stop':
        run_command(stop)
    elif sys.argv[1] == 'heartbeat':
        run_command(lambda: heartbeat(sys.argv[2:]))
    elif sys.argv[1] == 'siren':
        run_command(lambda: siren(sys.argv[2:]))
    elif sys.argv[1] == 'engineering':
        run_command(lambda: engineering_mode(sys.argv[2:]))

    # Command not found
    sys.exit(print_usage(SCRIPT_NAME))
